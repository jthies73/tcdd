name: CI

on:
  pull_request:
  push:
    branches: [ ci ]

jobs:
  scan_ruby:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: bin/brakeman --no-pager

  lint:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Lint code for consistent style
        run: bin/rubocop -f github

  test:
    runs-on: self-hosted

    # services:
    #  redis:
    #    image: redis
    #    ports:
    #      - 6379:6379
    #    options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git pkg-config google-chrome-stable

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Run tests
        env:
          RAILS_ENV: test
          # REDIS_URL: redis://localhost:6379/0
        run: bin/rails db:test:prepare test test:system

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore

  deploy:
    runs-on: self-hosted
    needs: [test, lint, scan_ruby]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Set up Rails credentials
        env:
          SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
        run: | 
          echo "$RAILS_MASTER_KEY" > config/master.key 
          echo "SECRET_KEY_BASE=$SECRET_KEY_BASE" >> .env
          echo "RAILS_ENV=production" >> .env

      - name: Build image
        env:
          RAILS_ENV: production
          SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
        run: |
          echo "Building tcdd-app-be image... üèó"
          docker build --build-arg RAILS_MASTER_KEY=${{ secrets.RAILS_MASTER_KEY }} --build-arg SECRET_KEY_BASE=${{ secrets.SECRET_KEY_BASE }} -t tcdd-app-image .
  
      - name: Deploy image
        env:
          RAILS_ENV: production
          SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
        run: |
          echo "Deploying tcdd-app-be image üöÄ"
          docker stop tcdd-app || true && docker rm tcdd-app || true
          docker network ls
          docker ps -a
          docker run -d -e "SECRET_KEY_BASE=${{ secrets.SECRET_KEY_BASE }}" -e "RAILS_ENV=production" \
                     --net tcdd-net --ip 172.43.0.10 -v tcdd-app-data:/app/data/ --name tcdd-app tcdd-app-image